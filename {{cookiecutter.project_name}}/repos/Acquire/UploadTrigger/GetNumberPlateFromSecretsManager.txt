private async Task<string> getNumberPlateFromSecretsManager(ILambdaContext context)
    {
      string regEx = "";
      string secretName = "/Staging/{{cookiecutter.project_name}}/Metadata";
      string region = "ap-southeast-2";
      string secret = "";

      MemoryStream memoryStream = new MemoryStream();

      IAmazonSecretsManager client = new AmazonSecretsManagerClient(RegionEndpoint.GetBySystemName(region));

      GetSecretValueRequest request = new GetSecretValueRequest();
      request.SecretId = secretName;
      request.VersionStage = "AWSCURRENT"; // VersionStage defaults to AWSCURRENT if unspecified.

      GetSecretValueResponse response = null;

      // In this sample we only handle the specific exceptions for the 'GetSecretValue' API.
      // See https://docs.aws.amazon.com/secretsmanager/latest/apireference/API_GetSecretValue.html
      // We rethrow the exception by default.

      try
      {
        response = await client.GetSecretValueAsync(request);
      }
      catch (DecryptionFailureException e)
      {
        context.Logger.LogLine("Secrets Manager can't decrypt the protected secret text using the provided KMS key.");
        // Deal with the exception here, and/or rethrow at your discretion.
        throw;
      }
      catch (InternalServiceErrorException e)
      {
        context.Logger.LogLine("An error occurred on the server side.");
        // Deal with the exception here, and/or rethrow at your discretion.
        throw;
      }
      catch (Amazon.SecretsManager.Model.InvalidParameterException e)
      {
        context.Logger.LogLine("You provided an invalid value for a parameter.");
        // Deal with the exception here, and/or rethrow at your discretion
        throw;
      }
      catch (InvalidRequestException e)
      {
        context.Logger.LogLine("You provided a parameter value that is not valid for the current state of the resource.");
        // Deal with the exception here, and/or rethrow at your discretion.
        throw;
      }
      catch (Amazon.SecretsManager.Model.ResourceNotFoundException e)
      {
        context.Logger.LogLine("We can't find the resource that you asked for.");
        // Deal with the exception here, and/or rethrow at your discretion.
        throw;
      }
      catch (System.AggregateException ae)
      {
        context.Logger.LogLine("More than one of the above exceptions were triggered.");
        // Deal with the exception here, and/or rethrow at your discretion.
        throw;
      }

      // Decrypts secret using the associated KMS CMK.
      // Depending on whether the secret is a string or binary, one of these fields will be populated.
      if (response.SecretString != null)
      {
        secret = response.SecretString;
        context.Logger.LogLine($"Secret value is {secret}");
        var deserialized = JsonConvert.DeserializeObject<Dictionary<string, string>>(secret);
        regEx = deserialized["NumberPlateRegEx"];
      }
      else
      {
        memoryStream = response.SecretBinary;
        StreamReader reader = new StreamReader(memoryStream);
        string decodedBinarySecret = System.Text.Encoding.UTF8.GetString(Convert.FromBase64String(reader.ReadToEnd()));
        var deserialized = JsonConvert.DeserializeObject<Dictionary<string, string>>(decodedBinarySecret);
        regEx = deserialized["NumberPlateRegEx"];
      }
      context.Logger.LogLine($"NumberPlateRegEx value is {regEx}");
      return regEx;
    }